import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import emailjs from '@emailjs/nodejs';

// Toggle hier: true = wirklich senden, false = nur console.log
const SEND_REAL_EMAILS = true;

interface EmailParams extends Record<string, unknown> {
    to_email: string;
    subject: string;
    company_name: string;
    greeting: string;
    customer_name: string;
    message: string;
    highlight_message?: string;
    button_url?: string;
    button_text?: string;
    company_email: string;
    company_website: string;
    footer_note?: string;
}

@Injectable()
export class EmailService {
    private readonly logger = new Logger(EmailService.name);
    private readonly serviceId: string;
    private readonly templateId: string;
    private readonly publicKey: string;
    private readonly privateKey: string;

    constructor(private configService: ConfigService) {
        this.serviceId = this.configService.get<string>('EMAILJS_SERVICE_ID');
        this.templateId = this.configService.get<string>('EMAILJS_TEMPLATE_ID');
        this.publicKey = this.configService.get<string>('EMAILJS_PUBLIC_KEY');
        this.privateKey = this.configService.get<string>('EMAILJS_PRIVATE_KEY');

        if (!SEND_REAL_EMAILS) {
            this.logger.warn('‚ö†Ô∏è  EMAIL SERVICE IM MOCK MODE - Emails werden nur geloggt!');
        }
    }

    async sendEmail(params: EmailParams): Promise<void> {
        if (!SEND_REAL_EMAILS) {
            // Nur Console-Logging
            this.logger.log('üìß [MOCK] Email w√ºrde gesendet werden:');
            this.logger.log(`   An: ${params.to_email}`);
            this.logger.log(`   Betreff: ${params.subject}`);
            this.logger.log(`   Kunde: ${params.customer_name}`);
            this.logger.log(`   Firma: ${params.company_name}`);
            this.logger.log(`   Nachricht: ${params.message}`);
            if (params.highlight_message) {
                this.logger.log(`   Highlight: ${params.highlight_message}`);
            }
            if (params.button_url) {
                this.logger.log(`   Button: ${params.button_text} -> ${params.button_url}`);
            }
            this.logger.log(`   Template: ${this.templateId}`);
            return;
        }

        // Echtes Senden via EmailJS
        try {
            const response = await emailjs.send(
                this.serviceId,
                this.templateId,
                params,
                {
                    publicKey: this.publicKey,
                    privateKey: this.privateKey,
                }
            );

            this.logger.log(`‚úÖ Email erfolgreich gesendet: ${response.status} ${response.text}`);
        } catch (error) {
            this.logger.error('‚ùå Fehler beim Email-Versand:', error);
            throw new Error(`Email konnte nicht gesendet werden: ${error.message}`);
        }
    }

    async sendContactRequestConfirmation(data: {
        userEmail: string;
        userName: string;
        serviceType: string;
    }): Promise<void> {
        if (!SEND_REAL_EMAILS) {
            this.logger.log('Email would be sent to: ' + JSON.stringify(data));
            return;
        }
        const emailParams: EmailParams = {
            to_email: data.userEmail,
            subject: 'Vielen Dank f√ºr Ihre Anfrage!',
            company_name: this.configService.get<string>('COMPANY_NAME', 'LeonardsMedia'),
            greeting: 'Hallo',
            customer_name: data.userName,
            message: `Vielen Dank f√ºr Ihre Anfrage zu unserem Service "${data.serviceType}". 
    
    Wir haben Ihre Nachricht erhalten und freuen uns √ºber Ihr Interesse. Unser Team wird Ihre Anfrage pr√ºfen und sich schnellstm√∂glich bei Ihnen melden.
    
    In der Zwischenzeit k√∂nnen Sie gerne unsere Website besuchen oder uns direkt kontaktieren, falls Sie weitere Fragen haben.`,
            highlight_message: 'üéâ Wir melden uns innerhalb von 24 Stunden bei Ihnen!',
            button_url: this.configService.get<string>('COMPANY_WEBSITE'),
            button_text: 'Zur Website',
            company_email: this.configService.get<string>('COMPANY_EMAIL'),
            company_website: this.configService.get<string>('COMPANY_WEBSITE'),
            footer_note: 'Bei R√ºckfragen stehen wir Ihnen jederzeit zur Verf√ºgung.',
        };

        await this.sendEmail(emailParams);
    }

    async sendWebsiteGenerationComplete(data: {
        userEmail: string;
        userName: string;
        projectName: string;
        websiteId: string;
        typeOfWebsite: string;
    }): Promise<void> {

        if (!SEND_REAL_EMAILS) {
            this.logger.log('Email would be sent to: ' + JSON.stringify(data));
            return;
        }
        const previewUrl = `${this.configService.get<string>('FRONTEND_URL')}/preview/${data.websiteId}`;


        const websiteTypeNames: Record<string, string> = {
            'praesentation': 'Pr√§sentations-Website',
            'landing': 'Landing Page',
            'event': 'Event-Website'
        };

        const websiteTypeName = websiteTypeNames[data.typeOfWebsite] || 'Website';

        const emailParams: EmailParams = {
            to_email: data.userEmail,
            subject: `üéâ Ihre Website "${data.projectName}" ist fertig!`,
            company_name: this.configService.get<string>('COMPANY_NAME', 'LeonardsMedia'),
            greeting: 'Hallo',
            customer_name: data.userName,
            message: `Gro√üartige Neuigkeiten! Ihre ${websiteTypeName} "${data.projectName}" wurde erfolgreich generiert und steht nun zur Vorschau bereit.

Sie k√∂nnen Ihre neue Website jetzt ansehen, testen und bei Bedarf Anpassungen vornehmen. Klicken Sie einfach auf den Button unten, um direkt zur Vorschau zu gelangen.

Wir hoffen, dass das Ergebnis Ihren Erwartungen entspricht. Bei Fragen oder √Ñnderungsw√ºnschen stehen wir Ihnen gerne zur Verf√ºgung.`,
            highlight_message: '‚ú® Ihre Website ist jetzt online und bereit zur Ansicht!',
            button_url: previewUrl,
            button_text: 'Website-Vorschau √∂ffnen',
            company_email: this.configService.get<string>('COMPANY_EMAIL'),
            company_website: this.configService.get<string>('COMPANY_WEBSITE'),
            footer_note: 'Sie k√∂nnen die Vorschau jederzeit √ºber Ihr Dashboard aufrufen.',
        };

        await this.sendEmail(emailParams);
    }

    // email.service.ts (Erg√§nzung in der Klasse EmailService)

    async sendWebsiteReadyEmail(data: {
        to: string;
        projectName: string;
        pageId: string;
        previewUrl: string;
    }): Promise<void> {
        if (!SEND_REAL_EMAILS) {
            this.logger.log('üìß [MOCK] Website Ready Email w√ºrde gesendet werden:');
            this.logger.log(`   An: ${data.to}`);
            this.logger.log(`   Projekt: ${data.projectName}`);
            this.logger.log(`   Page ID: ${data.pageId}`);
            this.logger.log(`   Preview URL: ${data.previewUrl}`);
            return;
        }

        const emailParams: EmailParams = {
            to_email: data.to,
            subject: `üéâ Deine Website "${data.projectName}" ist fertig!`,
            company_name: this.configService.get<string>('COMPANY_NAME', 'LeonardsMedia'),
            greeting: 'Hey',
            customer_name: '', // optional: aus Email extrahieren
            message: `Gro√üartige Neuigkeiten! Dein Website-Projekt "${data.projectName}" wurde erfolgreich mit KI generiert und ist jetzt bereit zur Vorschau.

Die KI hat eine moderne, einzigartige Website basierend auf deinen Vorgaben erstellt. Du kannst sie jetzt ansehen, testen und bei Bedarf weitere Anpassungen vornehmen.

Klicke einfach auf den Button unten, um direkt zur Vorschau zu gelangen und deine neue Website zu erleben!`,
            highlight_message: '‚ú® Deine Website ist fertig und wartet auf dich!',
            button_url: data.previewUrl,
            button_text: 'üöÄ Website jetzt ansehen',
            company_email: this.configService.get<string>('COMPANY_EMAIL'),
            company_website: this.configService.get<string>('COMPANY_WEBSITE'),
            footer_note: 'Du kannst die Vorschau jederzeit √ºber dein Dashboard aufrufen.',
        };

        await this.sendEmail(emailParams);
    }

    async sendWebsiteErrorEmail(data: {
        to: string;
        projectName: string;
        error: string;
    }): Promise<void> {
        if (!SEND_REAL_EMAILS) {
            this.logger.log('üìß [MOCK] Website Error Email w√ºrde gesendet werden:');
            this.logger.log(`   An: ${data.to}`);
            this.logger.log(`   Projekt: ${data.projectName}`);
            this.logger.log(`   Fehler: ${data.error}`);
            return;
        }

        const retryUrl = `${this.configService.get<string>('FRONTEND_URL')}/preview-form`;

        const emailParams: EmailParams = {
            to_email: data.to,
            subject: `‚ö†Ô∏è Problem bei der Erstellung von "${data.projectName}"`,
            company_name: this.configService.get<string>('COMPANY_NAME', 'LeonardsMedia'),
            greeting: 'Hallo',
            customer_name: '',
            message: `Leider ist bei der Generierung deiner Website "${data.projectName}" ein Problem aufgetreten.

Fehlerdetails: ${data.error}

Das kann verschiedene Gr√ºnde haben:
‚Ä¢ Tempor√§re technische Schwierigkeiten
‚Ä¢ Ungew√∂hnliche Eingabedaten
‚Ä¢ √úberlastung des KI-Systems

Wir empfehlen dir:
1. Versuche es in ein paar Minuten erneut
2. √úberpr√ºfe deine Eingaben
3. Kontaktiere uns bei wiederholten Problemen

Wir entschuldigen uns f√ºr die Unannehmlichkeiten und helfen dir gerne weiter!`,
            highlight_message: 'üîß Keine Sorge ‚Äì versuch es einfach nochmal oder kontaktiere uns!',
            button_url: retryUrl,
            button_text: 'Erneut versuchen',
            company_email: this.configService.get<string>('COMPANY_EMAIL'),
            company_website: this.configService.get<string>('COMPANY_WEBSITE'),
            footer_note: 'Bei Fragen stehen wir dir jederzeit zur Verf√ºgung.',
        };

        await this.sendEmail(emailParams);
    }


}